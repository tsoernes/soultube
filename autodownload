#! /usr/bin/env python

# Soulseek automatic batch downloader
# Author: tsoernes
# Original author: museekcontrol - daelstorm <daelstorm@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

import sys
import time
from multiprocessing import Process
import os
import select
import getopt
import ConfigParser
from time import sleep
try:
    from museek import messages, driver
except:
    print """WARNING: The Museek Message-Parsing modules, messages.py and/or
     driver.py were not found. Please install them into your
     '/usr/lib/python2.X/site-packages/museek' directory, or place them in
     a 'museek' subdirectory of the directory that contains the
     museekcontrol python scipt. Try executing 'python install.py' in
     the 'python-bindings' directory of museek."""

Version = "0.1.0"


def output(s):
    print str(s)
    sys.stdout.flush()


parser = ConfigParser.ConfigParser()
config_dir = str(os.path.expanduser("~/.museekd/"))
config_file = config_dir + "museekcontrol.config"
interface = None
password = None
log_dir = None
search_time = None


def usage():
    print(
        """Soultube is a command-line script for Museek, the P2P Soulseek Daemon
Author: tsoernes
Forked from: MuseekControl by daelstorm
Version: %s
    SEARCHING:
    --ad,   --autodownload <query>      (Globally search for <query> & \
            autoselect a file for downloading)

    TRANSFERS:
    --t,    --transfers                 (Display all current up- and downloads)
    --mt,   --mtransfers                (Monitor transfers)

    MUSEEK DAEMON LOGIN:
    -i, --interface <host:port|/socket.path> (Use a different interface)
    -v, --version                       (Display version and quit)
    -h, --help                          (Display this help and exit)
    """ % Version)
    sys.exit(2)


try:
    opts, args = getopt.getopt(sys.argv[1:], "hc:vi:p:j:l:p:m:b:tar", [
        "help", "version",
        "ad=", "autodownload=",
        "t", "transfers",
        "mt", "mtransfers",
    ])
except getopt.GetoptError:
    usage()
    sys.exit(2)
if len(opts) == 0:
    usage()
    sys.exit(2)

user = None
want = None
reason = None


# Defaults parameters
mconfig = {
    "connection": {
        "interface": 'localhost:2240',
        "password": None
    },
    "museekcontrol": {
        "log_dir": "~/.museekd/logs/"
    },
    "autodownload": {
        "search_time": 30
    },
}


# Create a default soultube config if none exits,
# or add defaults fields if they are missing
def create_config():
    parser.read([config_file])
    update_config()


# Read config file into 'mconfig' dict (overwrites defaults)
def read_config():
    parser.read([config_file])
    for i in parser.sections():
        for j in parser.options(i):
            val = parser.get(i, j, raw=1)
            if j in ['login', 'password', 'interface', 'log_dir',
                     'search_time']:
                mconfig[i][j] = val
            else:
                try:
                    mconfig[i][j] = eval(val, {})
                except:
                    mconfig[i][j] = None


def update_config():
    mconfig_file = file(config_file, 'w')
    for i in mconfig.keys():
        if not parser.has_section(i):
            parser.add_section(i)
        for j in mconfig[i].keys():
            if j not in ["evilness", "nonexisting", "hated", "options"]:
                parser.set(i, j, mconfig[i][j])
            else:
                parser.remove_option(i, j)
    parser.write(mconfig_file)
    mconfig_file.close()


def check_path():
    if os.path.exists(config_dir):
        if os.path.exists(config_file) and os.stat(config_file)[6] > 0:
            read_config()
        else:
            create_config()
    else:
        os.mkdir(config_dir, 0700)
        create_config()


check_path()

if log_dir is not None:
    mconfig["museekcontrol"]["log_dir"] = log_dir
if password is not None:
    mconfig["connection"]["password"] = password
if interface is not None:
    mconfig["connection"]["interface"] = interface
if search_time is not None:
    mconfig["autodownload"]["search_time"] = search_time
update_config()


class museekcontrol(driver.Driver):
    def __init__(self):
        driver.Driver.__init__(self)
        self.s_query = {}   # Mapping from tickets to queries
        self.s_ticket = {}  # Mapping from queries to tickets
        self.search_number = 0
        self.download_dir = None
        self.connected = 0
        self.count = 0
        self.search_results = dict()
        self.states = {
            0: "Finished",
            1: "Transferring",
            2: "Negotiating",
            3: "Waiting",
            4: "Establishing",
            5: "Initiating",
            6: "Connecting",
            7: "Queued",
            8: "Address",
            9: "Status",
            10: "Offline",
            11: "Closed",
            12: "Can't Connect",
            13: "Aborted",
            14: "Not Shared"
        }

    # Connect driver to museekd daemon
    def connect_daemon(self):
        try:
            driver.Driver.connect(
                self, mconfig["connection"]["interface"],
                mconfig["connection"]["password"],
                messages.EM_CHAT | messages.EM_USERINFO | messages.EM_PRIVATE
                | messages.EM_TRANSFERS | messages.EM_USERSHARES
                | messages.EM_CONFIG)
        except Exception, e:
            print "Could not connect to museek daemon. Run 'museekd'"
            print e

    # Disconnect driver to museekd daemon
    def disconnect_daemon(self):
        driver.Driver.close(self)

    # Connect daemon to soulseek servers
    def connect_server(self):
        self.send(messages.ConnectServer())

    # Disconnect daemon to soulseek servers
    def disconnect_server(self):
        self.send(messages.DisconnectServer())

    def process(self):
        d = 0
        r, _, _ = select.select([self.socket, sys.stdin], [], [self.socket], d)
        if self.socket in r:
            driver.Driver.process(self)
        sleep(0.01)

    # Museekd daemon config. Called upon museekd login
    def cb_config_state(self, config):
        try:
            self.download_dir = config['transfers']['download-dir']
        except KeyError:
            print "No download directory set in museekd config"

    def cb_search_ticket(self, query, ticket):
        self.search_results[ticket] = []
        self.s_query[ticket] = query
        self.s_ticket[query] = ticket

    def cb_server_privileges(self, time_left):
        print "%i seconds of privileges left" % time_left

    def cb_status_message(self, msg_type, msg):
        print(msg)

    def cb_debug_message(self, msg_domain, msg):
        print("Debug message: %s, %s" % (msg_domain, msg))

    def cb_search_results(self, ticket, user, free, speed, queue, results):
        if want not in ("gsearch", "autodownload"):
            print("cb search res got called with unknown want")
        if len(results) > 0:
            output("---------\nSearch: %s Results [%s-%s] from user: %s \n"
                   % (str(self.s_query[ticket]), str(self.search_number),
                      str(self.search_number+len(results)), user))
            self.search_number += len(results)
        user_results = []
        for result in results:
            path = result[0]
            ftype = path.split('.')[-1].lower()
            size_kb = result[1] / 1024
            if size_kb > 1000:
                size = str(size_kb / 1024) + 'MB'
            else:
                size = str(size_kb) + 'KB'

            bitrate = "None"
            length = "0"
            if len(result) > 3 and len(result[3]) > 0:
                bitrate = result[3][0]
                if len(result[3]) > 1:
                    length = result[3][1]

            length = int(length)
            # Attempt to calculate length if bitrate and size
            # are given but length is not
            if length < 10 and bitrate is not "None" and size_kb > 0:
                length = size_kb / int(bitrate) * 8
            minutes = length / 60
            seconds = str(length - (60 * minutes)) + 's'
            if len(seconds) < 2:
                seconds = '0' + seconds + 's'

            result_info = {"user": user,
                           "path": path,
                           "ftype": ftype,
                           "free": free,
                           "speed": speed,
                           "queue": queue,
                           "size_kb": size_kb,
                           "bitrate": bitrate,
                           "length": length}
            if free:
                user_results.append(result_info)
                free = 'Y'
            else:
                free = 'N'
            output("slsk://%s/%s" % (user, path.replace("\\", "/")))
            output("Size: " + str(size) + " Bitrate: " + str(bitrate) +
                   " Length: " + str(minutes) + ":" + seconds +
                   " Queue: " + str(queue) + " Speed: " + str(speed) +
                   " Free: " + free)
            output(" ")
        self.search_results[ticket] += user_results

    def cb_disconnected(self):
        self.connected = 0
        print "--- Disconnected from the Museek Daemon ---"
        sys.exit()

    def cb_login_error(self, reason):
        self.connected = 0
        if reason == "INVPASS":
            print "Couldn't log in: Invalid Password for daemon"
            self.connect_daemon()
        else:
            print "Couldn't log in: " + reason

    def cb_login_ok(self):
        self.connected = 1
        print "Login OK"

    def cb_server_state(self, state, username):
        if state:
            output("Connected to server as %s" % username)
        else:
            output("Not connected to server")

    # Presumably, this is automatically called upon daemon connect
    def cb_transfer_state(self, downloads, uploads):
        if want in ("mtransfers", "transfers"):
            for transfer in uploads:
                self.cb_transfer_update(transfer)
            for transfer in downloads:
                self.cb_transfer_update(transfer)
        if want == "transfers":
            sys.exit()

    def cb_transfer_update(self, transfer):
        if want in ("mtransfers", "transfers"):
            if transfer.is_upload:
                print "Upload:",
            else:
                print "Download:",
            print " slsk://%s/%s\nSize: %s Pos:\
                    %s Rate: %s State: %s %s" % (
                transfer.user, transfer.path, transfer.filesize,
                transfer.filepos, transfer.rate,
                self.states[int(transfer.state)], transfer.error)
            print "- - - - - - - - - - - - - - - -"

    def search(self, query):
        if self.connected == 1:
            msg = messages.Search(0, query)
            self.send(msg)
        else:
            print "Want search but not connected to daemon"

    def download(self, user, ufile):
        if self.connected == 1:
            print "ufile: " + ufile
            self.send(messages.DownloadFile(user, ufile))
        else:
            print "Want dl but not connected to daemon"

    def autodownload(self, query):
        if query not in self.s_ticket:
            print "Query not in tickets"
            return
        search_ticket = self.s_ticket[query]
        if search_ticket not in self.search_results:
            print "Ticket not in search results"
            return
        results = self.search_results[search_ticket]
        if not results:
            print "No search results for query: " + query
        choice = results[0]
        print("Selected %s from %s results" %
              (choice, len(results)))
        choice_user = choice["user"]
        choice_ufile = choice["path"]
        self.send(messages.DownloadFile(choice_user, choice_ufile))


if mconfig["connection"]["password"] is None:
    output("No password set")
    sys.exit()
c = museekcontrol()


# Read continuosly from a socket to the museekd daemon and handle the results
def start(duration=None):
    if duration is not None:
        t_end = time.time() + duration
    try:
        while duration is None or time.time() < t_end:
            if c.socket is None:
                c.connect_daemon()
            c.process()
    except Exception, e:
        print("Socket connection attempt exception: ")
        print(e)


c.connect_daemon()
while not c.connected:
    c.process()
# TODO: How does this work with multiple opts? Maybe want to increase search
# time as one param and autodownload as another etc.
for opts, args in opts:
    if opts in ("-h", "--help"):
        usage()
        sys.exit()
    elif opts in ("-v", "--version"):
        print "Soultube version: %s" % Version
        sys.exit(2)
    elif opts in ("--t", "--transfers"):
        want = "transfers"
        start()
    elif opts in ("--mt", "--mtransfers"):
        want = "mtransfers"
        start()
    elif opts in ("--ad", "--autodownload"):
        query = str(args)
        want = "autodownload"
        s_time = eval(mconfig['autodownload']['search_time'])
        print("Searching for %s seconds" % s_time)
        c.search(query)
        start(s_time)
        print "Finished searching"
        c.autodownload(query)
        start()
    elif opts in ("--connect"):
        c.connect_server()
        start()
    elif opts in ("--disconnect"):
        c.disconnect_server()
        start()
    else:
        print("Unknown opts")
        sys.exit()

# TODO
# 1) Don't download if file already exists
#   - search slsk down folder first - is it possible to get
#       this path from the daemon?
#   - then search a specified music lib in museekcontrol config
#   - implement exact match finder first, then fuzzy
# 2) File selection heuristic
# 3) Multi-downloader
#   - text file input, newline separated
#   - youtube playlist?
